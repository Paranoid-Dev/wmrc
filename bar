#!/bin/bash
# __                      
#/\ \                     
#\ \ \____    __    _ __  
# \ \ '__`\ /'__`\ /\`'__\
#  \ \ \L\ /\ \L\.\\ \ \/ 
#   \ \_,__\ \__/.\_\ \_\ 
#    \/___/ \/__/\/_/\/_/                          
# bar - lemonbar output

clock() {
    date '+%I:%M'
}

battery() {
    BATC=/sys/class/power_supply/BAT1/capacity
    BATS=/sys/class/power_supply/BAT1/status

    test "`cat $BATS`" = "Charging" && echo -n '+' || echo -n '-'

    sed -n p $BATC
}

volume() {
    amixer get Master | sed -n 'N;s/^.*\[\([0-9]\+%\).*$/\1/p'
}

cpuload() {
    LINE=`ps -eo pcpu |grep -vE '^\s*(0.0|%CPU)' |sed -n '1h;$!H;$g;s/\n/ +/gp'`
    bc <<< $LINE
}

memused() {
    read t f <<< `grep -E 'Mem(Total|Free)' /proc/meminfo |awk '{print $2}'`
    bc <<< "scale=2; 100 - $f / $t * 100" | cut -d. -f1
}

network() {
    read lo int1 int2 <<< `ip link | sed -n 's/^[0-9]: \(.*\):.*$/\1/p'`
    if iwconfig $int1 >/dev/null 2>&1; then
        wifi=$int1
        eth0=$int2
    else
        wifi=$int2
        eth0=$int1
    fi
    ip link show $eth0 | grep 'state UP' >/dev/null && int=$eth0 ||int=$wifi

    #int=eth0

    ping -c 1 8.8.8.8 >/dev/null 2>&1 && 
        echo "$int connected" || echo "$int disconnected"
}

nowplaying() {
        cur=`mpc current`
          test "$1" = "scroll" && PARSER='skroll -n20 -d0.5 -r' || PARSER='cat'
          test -n "$cur" && $PARSER <<< $cur || echo ""
}

windowid() {
        pfw
}

group() {
        grp=`mgfw -g $(pfw)`
        if [ $grp == 1 ]
        then
                echo "1 - - - -"
        elif [ $grp == 2 ]
        then
                echo "- 2 - - -"
        elif [ $grp == 3 ]
        then
                echo "- - 3 - -"
        elif [ $grp == 4 ]
        then
                echo "- - - 4 -"
        elif [ $grp == 5 ]
        then
                echo "- - - - 5"
        else
                echo "- - - - -"
        fi
}

# This loop will fill a buffer with our infos, and output it to stdout.
while :; do
    buf=""
    buf="${buf} $(nowplaying)"
    buf="${buf} %{c}$(group)"
    buf="${buf} %{r}$(clock) / $(battery) / $(windowid)"

    echo $buf
    # use `nowplaying scroll` to get a scrolling output!
    #sleep 1 # The HUD will be updated every second
done
